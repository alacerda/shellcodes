global _start

section .text

_start:
	jmp final

init_decoder:
	pop rsi
	mov rdi, rsi
	inc rdi

	xor rcx, rcx
	; put here the size of before-encoded-shell
	add rcx, 64
	dec rcx

	xor rax, rax
	mov al, 1
	xor rbx, rbx

loop_decoder:
	mov bl, byte [rsi + rax + 1]
	mov byte [rdi], bl
	inc rdi
	inc rax
	inc rax
	loop loop_decoder
	
	jmp rri_shellcode
final:
	call init_decoder
	rri_shellcode: db 0xeb,0x31,0x14,0x35,0x4d,0xc7,0x61,0x8d,0x6e,0x48,0x64,0x3c,0x61,0xd2,0x20,0x48,0x76,0xdb,0x65,0x48,0x72,0x3c,0x20,0x61,0x63,0x01,0x61,0x8d,0x6d,0x01,0x61,0x6d,0x72,0x61,0x61,0x31,0x64,0x72,0x61,0x4d,0x21,0xff,0x0a,0x8d,0x48,0x0f,0x31,0x01,0xc0,0x48,0x48,0xc2,0x83,0x61,0xc0,0x61,0x01,0x35,0x48,0x72,0x89,0x72,0xc7,0xd2,0x48,0x61,0x8d,0x64,0x35,0xff,0xdb,0x83,0xff,0x61,0xff,0x05,0xff,0x20,0x48,0x20,0x31,0x14,0xd2,0x64,0x48,0x0f,0x83,0x48,0xc2,0x48,0x14,0xff,0x0f,0x31,0x05,0x01,0x48,0x6d,0x31,0x48,0xc0,0x31,0x48,0x01,0x83,0x64,0xc0,0xeb,0x3c,0x48,0x48,0xc0,0x31,0x31,0xff,0x63,0x48,0xdb,0x83,0xc7,0xc7,0xff,0x01,0xff,0x0f,0x76,0x05,0x48
