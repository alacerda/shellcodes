global _start

section .text

_start:
	jmp final

init_decoder:
	pop rsi
	mov rdi, rsi
	inc rdi

	; find out the size of the real shellcode
	xor rax, rax
	xor r8, r8
	add r8, 2
	mov al, real_shellcode_size
	idiv r8
	xor rcx, rcx
	mov rcx, rax
	dec rcx

	mov al, 1
	xor rbx, rbx

loop_decoder:
	mov bl, byte [rsi + rax + 1]
	mov byte [rdi], bl
	inc rdi
	inc rax
	inc rax
	loop loop_decoder
	
	jmp rri_shellcode
final:
	call init_decoder
	rri_shellcode: db 0xeb,0x48,0x1e,0x73,0x5e,0x72,0x48,0x34,0x31,0xff,0xc0,0xc2,0xb0,0x4c,0x01,0x0f,0x48,0x48,0x89,0xc0,0xc7,0x20,0x48,0x6f,0x89,0x64,0xfa,0x57,0x48,0xc2,0x83,0x53,0xc2,0x6f,0x22,0x74,0x0f,0x72,0x05,0x48,0x48,0x53,0x31,0x6f,0xc0,0x68,0x48,0x41,0x83,0x20,0xc0,0xeb,0x3c,0x48,0x48,0x20,0x31,0x65,0xff,0x48,0x0f,0x6f,0x05,0x48,0xe8,0x83,0xdd,0x31,0xff,0x20,0xff,0x57,0xff,0x48,0x48,0x48,0x65,0x5e,0x6c,0x89,0x6c,0xc0,0x6f,0x20,0x20,0x1e,0x57,0xff,0x6f,0x72,0x72,0x83,0x6c,0x6f,0x64,0x48,0x20,0x45,0x74,0x6f,0x6f,0x48,0x20,0x48,0x74,0x05,0x68,0x48,0x65,0x89,0x20,0x3c,0x53,0x74,0x4c,0x89,0x41,0x48,0x45,0x20,0x2d,0x34,0x36,0x2d,0x34,0x6f,0x20,0x65,0x43,0x48,0x6f,0x68,0x75,0x41,0x72,0x6c,0x73,0x74,0x65,0x74,0x0a,0xc0
	real_shellcode_size: equ $-rri_shellcode
